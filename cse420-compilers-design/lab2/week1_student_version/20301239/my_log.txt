At line no: 0 type_specifier : INT 

int  

At line no: 0 type_specifier : INT 

int  

At line no: 0 parameter_list : type_specifier ID 

int  a  

At line no: 2 variable : ID 

a  

At line no: 2 factor : variable 

a  

At line no: 2 unary_expression : factor 

a  

At line no: 2 term : unary_expression 

a  

At line no: 2 simple_expression : term 

a  

At line no: 2 rel_expression : simple_expression 

a  

At line no: 2 logic_expression : rel_expression 

a  

At line no: 2 expression : logic_expression 

a  

At line no: 2 statement : RETURN expression SEMICOLON 

return  a  ; 


At line no: 2 statements : statement 

return a ; 
  

At line no: 3 compound_statement : LCURL statements RCURL 

{ 
return a ; 
  } 


At line no: 3 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int  bar  (  int a  )  { 
return a ; 
 } 
  

At line no: 3 unit : func_definition 

int bar ( int a ) { 
return a ; 
 } 
  

At line no: 3 program : unit 

int bar ( int a ) { 
return a ; 
 } 
  

At line no: 5 type_specifier : INT 

int  

At line no: 7 variable : ID 

a  

At line no: 7 factor : CONST_INT 

56  

At line no: 7 unary_expression : factor 

56  

At line no: 7 term : unary_expression 

56  

At line no: 7 simple_expression : term 

56  

At line no: 7 rel_expression : simple_expression 

56  

At line no: 7 logic_expression : rel_expression 

56  

At line no: 7 expression : variable ASSIGNOP logic_expression 

a  =  56  

At line no: 7 expression_statement : expression SEMICOLON 

a = 56  ; 


At line no: 7 statement : expression_statement 

a = 56 ; 
  

At line no: 7 statements : statement 

a = 56 ; 
  

At line no: 8 variable : ID 

a  

At line no: 8 factor : variable 

a  

At line no: 8 unary_expression : factor 

a  

At line no: 8 term : unary_expression 

a  

At line no: 8 factor : CONST_INT 

2  

At line no: 8 unary_expression : factor 

2  

At line no: 8 term : term MULOP unary_expression 

a  %  2  

At line no: 8 simple_expression : term 

a % 2  

At line no: 8 factor : CONST_INT 

0  

At line no: 8 unary_expression : factor 

0  

At line no: 8 term : unary_expression 

0  

At line no: 8 simple_expression : term 

0  

At line no: 8 rel_expression : simple_expression RELOP simple_expression 

a % 2  ==  0  

At line no: 8 logic_expression : rel_expression 

a % 2 == 0  

At line no: 8 expression : logic_expression 

a % 2 == 0  

At line no: 10 statement : PRINTLN LPAREN ID RPAREN SEMICOLON 

printf  (  a  )  ; 


At line no: 10 statements : statement 

printf ( a ) ; 
  

At line no: 11 compound_statement : LCURL statements RCURL 

{ 
printf ( a ) ; 
  } 


At line no: 11 statement : compound_statement 

{ 
printf ( a ) ; 
 } 
  

At line no: 12 variable : ID 

a  

At line no: 12 factor : variable 

a  

At line no: 12 unary_expression : factor 

a  

At line no: 12 term : unary_expression 

a  

At line no: 12 factor : CONST_INT 

2  

At line no: 12 unary_expression : factor 

2  

At line no: 12 term : term MULOP unary_expression 

a  %  2  

At line no: 12 simple_expression : term 

a % 2  

At line no: 12 factor : CONST_INT 

1  

At line no: 12 unary_expression : factor 

1  

At line no: 12 term : unary_expression 

1  

At line no: 12 simple_expression : term 

1  

At line no: 12 rel_expression : simple_expression RELOP simple_expression 

a % 2  ==  1  

At line no: 12 logic_expression : rel_expression 

a % 2 == 1  

At line no: 12 expression : logic_expression 

a % 2 == 1  

At line no: 14 statement : PRINTLN LPAREN ID RPAREN SEMICOLON 

printf  (  a  )  ; 


At line no: 14 statements : statement 

printf ( a ) ; 
  

At line no: 15 compound_statement : LCURL statements RCURL 

{ 
printf ( a ) ; 
  } 


At line no: 15 statement : compound_statement 

{ 
printf ( a ) ; 
 } 
  

At line no: 18 statement : PRINTLN LPAREN ID RPAREN SEMICOLON 

printf  (  a  )  ; 


At line no: 18 statements : statement 

printf ( a ) ; 
  

At line no: 19 compound_statement : LCURL statements RCURL 

{ 
printf ( a ) ; 
  } 


At line no: 19 statement : compound_statement 

{ 
printf ( a ) ; 
 } 
  

At line no: 19 statement : IF LPAREN expression RPAREN statement ELSE statement 

if  (  a % 2 == 1  )  { 
printf ( a ) ; 
 } 
  else  { 
printf ( a ) ; 
 } 
  

At line no: 19 statement : IF LPAREN expression RPAREN statement ELSE statement 

if  (  a % 2 == 0  )  { 
printf ( a ) ; 
 } 
  else  if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
  

At line no: 19 statements : statements statement 

a = 56 ; 
  if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
  

At line no: 20 compound_statement : LCURL statements RCURL 

{ 
a = 56 ; 
 if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
  } 


At line no: 20 func_definition : type_specifier ID LPAREN RPAREN compound_statement 

int  main  (  )  { 
a = 56 ; 
 if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
 } 
  

At line no: 20 unit : func_definition 

int main ( ) { 
a = 56 ; 
 if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
 } 
  

At line no: 20 program : program unit 

int bar ( int a ) { 
return a ; 
 } 
  int main ( ) { 
a = 56 ; 
 if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
 } 
  

At line no: 20 start : program 

int bar ( int a ) { 
return a ; 
 } 
 int main ( ) { 
a = 56 ; 
 if ( a % 2 == 0 ) { 
printf ( a ) ; 
 } 
 else if ( a % 2 == 1 ) { 
printf ( a ) ; 
 } 
 else { 
printf ( a ) ; 
 } 
 } 
  

Number of lines: 20
